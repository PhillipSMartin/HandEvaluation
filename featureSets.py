# -*- coding: utf-8 -*-
"""
Created on Wed May 26 17:43:06 2021

@author: sarab


featureSets is a global dictionary containing three feature sets:
    flat - used when the data is restricted to hands distributed 4432 or 4333
    balanced - used when 5332 or 5422 hands are included in the data as well
    semi-balanced - used when 6322 hands are included
The feature set is specified in the -f: paramter on the command line
In interactive mode, you are asked for the feature set unless the filename of the
    data ends in _flat, _balanced, or _semi-balanced
    
Each feature set comprises:
    A list of features (strings) specified either as high cards followed by x's for spots' or
        as a specific distribution ('4333' or '5422')
    first_special_feature - the index of the first non-high-card feature (that is, the first
        feature for which the generic feature-counting method will not work)
    fixed_features - a list of indices of features we do not wish to adjust in learning
    features_ordered_by_high_cards - a list of sets of feature indices for which, within each set,
        the feature weights must remain in weakly increasing order - every feature must
        belong to at exactly one set in this list
    features_ordered_by_length - another list of sets of feature indices for which, within each set,
        the feature weights must remain in weakly increasing order - every feature must
        belong to at exactly one set in this list
    default_vectors - a vector table comprising default vectors for this feature set
        (which you can override by specifying a vector table file)
        The vector table is a DataFrame with the following columns:
                Vector - a list of  weights (point counts) for each feature
                Vul_threshold - the point count for which we bid a vul game
                Nv_threshold - the point count for which we bid a non-vul game
                Excpectation - the net imps per board this vector expects to win
                Accuracy - the percentage of deals this vector classifies correctly
                Score - the score we receive on a simulated match against all other vectors
        Vul_threshold and Nv_threshold for default vectors are initially set to zero
            and can be calculated via the engine.calculateThresholdsByVulnerability method
        Expectation can be calculated via the engine.calculateExpectation method
        Accuracy can be calculated via the engine.calculateAccuracy method
        Score can be calculated via the engine.runSimulatedMatch method
        
        The default vectors include
            Work - standard 4321 point count
            Work++ - Work plus 1 point for a 5-card suit or 2 points for a 6-card suit
            Woolsey - add 1/2 point for each ace, deduct 1/4 point for each queen or jack
            Woolsey+ - Woolsey plus 1/2 point for a 5-card suit or 1 point for a 6-card suit
            Kleinman - add 1/3 point for each ace or ten, deduct 1/3 point for each queen or jack,
                add 1/3 point for any face card with an A or K, deduct 1/3 for Qx or Jxx,
                deduct 1/3 if lowest card is a face card, add 2/3 for 5th and 6th cards if suit
                is headed by at least Qt, deduct 2/3 for 4333
            Kleinman+  - above but no deduction for 4333 and no bonus for AK combination

"""


import pandas as pd

global featureSets

featureSets = { 'flat' : # 4333 or 4432
    { 'feature_names' : ['AK',
        'AQ',
        'AJ',
        'AT',
        'Ax',
        'KQ',
        'KJ',
        'KT',
        'Kx',
        'QJ',
        'QT',
        'Qx',
        'JT',
        'Jx',
        'Tx',
        'xx',
        'AKQ',
        'AKJ',
        'AKT',
        'AKx',
        'AQJ',
        'AQT',
        'AQx',
        'AJT',
        'AJx',
        'ATx',
        'Axx',
        'KQJ',
        'KQT',
        'KQx',
        'KJT',
        'KJx',
        'KTx',
        'Kxx',
        'QJT',
        'QJx',
        'QTx',
        'Qxx',
        'JTx',
        'Jxx',
        'Txx',
        'xxx',
        'AKQJ',
        'AKQT',
        'AKQx',
        'AKJT',
        'AKJx',
        'AKTx',
        'AKxx',
        'AQJT',
        'AQJx',
        'AQTx',
        'AQxx',
        'AJTx',
        'AJxx',
        'ATxx',
        'Axxx',
        'KQJT',
        'KQJx',
        'KQTx',
        'KQxx',
        'KJTx',
        'KJxx',
        'KTxx',
        'Kxxx',
        'QJTx',
        'QJxx',
        'QTxx',
        'Qxxx',
        'JTxx',
        'Jxxx',
        'Txxx',
        'xxxx',
        '4333'],
     'first_special_feature' : -1,  # first feature that cannot be determined by a string search
     'fixed_features' : [],         # features for which we do not wish to adjust the weights
     'features_ordered_by_high_cards': [range(4, -1, -1),
        range(8, 4, -1),
        range(11, 8, -1),
        range(15, 11, -1),
        range(19, 15, -1),
        range(22, 19, -1),
        range(26, 22, -1),
        range(29, 26, -1),
        range(33, 29, -1),
        range(37, 33, -1),
        range(41, 37, -1),
        range(48, 41, -1),
        range(52, 48, -1),
        range(56, 52, -1),
        range(60, 56, -1),
        range(64, 60, -1),
        range(68, 64, -1),
        range(72, 68, -1),
        range(73, 72, -1)],
    'features_ordered_by_length' : [[0, 19, 48],
        [1, 22, 52],
        [2, 24, 54],
        [3, 25, 55],
        [4, 26, 56],
        [5, 29, 60],
        [6, 31, 62],
        [7, 32, 63],
        [8, 33, 64],
        [9, 35, 66],
        [10, 36, 67],
        [11, 37, 68],
        [12, 38, 69],
        [13, 39, 70],
        [14, 40, 71],
        [15, 41, 72],
        [16, 44],
        [17, 46],
        [18, 47],
        [20, 50],
        [21, 51],
        [23, 53],
        [27, 58],
        [28, 59],
        [30, 61],
        [34, 65],
        [42],
        [43],
        [45],
        [49],
        [57],
        [73]],
     'default_vectors' : pd.DataFrame({ 'Vector': [[14, 12, 10, 8, 8, 10, 8, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            18, 16, 14, 14, 14, 12, 12, 10, 10, 8, 8, 12, 10, 10, 8, 8, 6, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            20, 18, 18, 16, 16, 14, 14, 14, 14, 12, 12, 10, 10, 8, 8, 12, 12, 10, 10, 8, 8, 6, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            0],
        [30, 25, 21, 18, 18, 19, 15, 12, 12, 10, 7, 7, 3, 3, 0, 0, 
            37, 33, 30, 30, 28, 25, 25, 21, 21, 18, 18, 22, 19, 19, 15, 15, 12, 12, 10, 10, 7, 7, 3, 3, 0, 0, 
            40, 37, 37, 33, 33, 30, 30, 28, 28, 25, 25, 21, 21, 18, 18, 22, 22, 19, 19, 15, 15, 12, 12, 10, 10, 7, 7, 3, 3, 0, 0, 
            0],
        [22, 18, 15, 14, 13, 14, 11, 10, 9, 5, 5, 4, 2, 1, 0, 0, 
            28, 25, 24, 23, 21, 20, 19, 17, 16, 14, 13, 17, 16, 15, 13, 12, 10, 9, 8, 7, 6, 5, 2, 1, 0, 0, 
            31, 30, 29, 27, 26, 24, 23, 23, 22, 20, 19, 17, 16, 14, 13, 19, 18, 16, 15, 13, 12, 10, 9, 8, 7, 6, 5, 3, 2, 0, 0, 
            -2],
        [21, 18, 15, 14, 13, 14, 11, 10, 9, 5, 5, 4, 2, 1, 0, 0, 
            27, 24, 23, 22, 21, 20, 19, 17, 16, 14, 13, 17, 16, 15, 13, 12, 10, 9, 8, 7, 6, 5, 2, 1, 0, 0, 
            30, 29, 28, 26, 25, 23, 22, 23, 22, 20, 19, 17, 16, 14, 13, 19, 18, 16, 15, 13, 12, 10, 9, 8, 7, 6, 5, 3, 2, 0, 0, 
            0]
        ],
        'Vul_threshold': 0,
        'Nv_threshold': [50, 100, 75, 75],
        'Expectation' : 0.0,
        'Accuracy': 0.0,
        'Score': 0.0 }, index=['Work',
            'Woolsey',
            'Kleinman',
            'Kleinman+'])
        },
'balanced' : # 4333, 4432, or 5332
    { 'feature_names' : ['AK',
        'AQ',
        'AJ',
        'AT',
        'Ax',
        'KQ',
        'KJ',
        'KT',
        'Kx',
        'QJ',
        'QT',
        'Qx',
        'JT',
        'Jx',
        'Tx',
        'xx',
        'AKQ',
        'AKJ',
        'AKT',
        'AKx',
        'AQJ',
        'AQT',
        'AQx',
        'AJT',
        'AJx',
        'ATx',
        'Axx',
        'KQJ',
        'KQT',
        'KQx',
        'KJT',
        'KJx',
        'KTx',
        'Kxx',
        'QJT',
        'QJx',
        'QTx',
        'Qxx',
        'JTx',
        'Jxx',
        'Txx',
        'xxx',
        'AKQJ',
        'AKQT',
        'AKQx',
        'AKJT',
        'AKJx',
        'AKTx',
        'AKxx',
        'AQJT',
        'AQJx',
        'AQTx',
        'AQxx',
        'AJTx',
        'AJxx',
        'ATxx',
        'Axxx',
        'KQJT',
        'KQJx',
        'KQTx',
        'KQxx',
        'KJTx',
        'KJxx',
        'KTxx',
        'Kxxx',
        'QJTx',
        'QJxx',
        'QTxx',
        'Qxxx',
        'JTxx',
        'Jxxx',
        'Txxx',
        'xxxx',
        'AKQJT',
        'AKQJx',
        'AKQTx',
        'AKQxx',
        'AKJTx',
        'AKJxx',
        'AKTxx',
        'AKxxx',
        'AQJTx',
        'AQJxx',
        'AQTxx',
        'AQxxx',
        'AJTxx',
        'AJxxx',
        'ATxxx',
        'Axxxx',
        'KQJTx',
        'KQJxx',
        'KQTxx',
        'KQxxx',
        'KJTxx',
        'KJxxx',
        'KTxxx',
        'Kxxxx',
        'QJTxx',
        'QJxxx',
        'QTxxx',
        'Qxxxx',
        'JTxxx',
        'Jxxxx',
        'Txxxx',
        'xxxxx',
        '5422',
        '4333'],
     'first_special_feature' : -2,  # first feature that cannot be determined by a string search
     'fixed_features' : [],         # features for which we do not wish to adjust the weights
     'features_ordered_by_high_cards': [range(4, -1, -1),
        range(8, 4, -1),
        range(11, 8, -1),
        range(15, 11, -1),
        range(19, 15, -1),
        range(22, 19, -1),
        range(26, 22, -1),
        range(29, 26, -1),
        range(33, 29, -1),
        range(37, 33, -1),
        range(41, 37, -1),
        range(48, 41, -1),
        range(52, 48, -1),
        range(56, 52, -1),
        range(60, 56, -1),
        range(64, 60, -1),
        range(68, 64, -1),
        range(72, 68, -1),
        range(76, 72, -1),
        range(80, 76, -1),
        range(84, 80, -1),
        range(88, 84, -1),
        range(92, 88, -1),
        range(96, 92, -1),
        range(100, 96, -1),
        range(104, 100, -1),
        range(105, 104, -1),
        range(106, 105, -1),
        range(107, 106, -1)],
    'features_ordered_by_length' : [[0, 19, 48, 80],
        [1, 22, 52, 84],
        [2, 24, 54, 86],
        [3, 25, 55, 87],
        [4, 26, 56, 88],
        [5, 29, 60, 92],
        [6, 31, 62, 94],
        [7, 32, 63, 95],
        [8, 33, 64, 96],
        [9, 35, 66, 98],
        [10, 36, 67, 99],
        [11, 37, 68, 100],
        [12, 38, 69, 101],
        [13, 39, 70, 102],
        [14, 40, 71, 103],
        [15, 41, 72, 104],
        [16, 44, 76],
        [17, 46, 78],
        [18, 47, 79],
        [20, 50, 82],
        [21, 51, 83],
        [23, 53, 85],
        [27, 58, 90],
        [28, 59, 91],
        [30, 61, 93],
        [34, 65, 97],
        [42, 74],
        [43, 75],
        [45, 77],
        [49, 81],
        [57, 89],
        [73],
        [105],
        [106]],
     'default_vectors' : pd.DataFrame({ 'Vector': [[14, 12, 10, 8, 8, 10, 8, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            18, 16, 14, 14, 14, 12, 12, 10, 10, 8, 8, 12, 10, 10, 8, 8, 6, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            20, 18, 18, 16, 16, 14, 14, 14, 14, 12, 12, 10, 10, 8, 8, 12, 12, 10, 10, 8, 8, 6, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            20, 20, 18, 18, 16, 16, 14, 14, 14, 14, 12, 12, 10, 10, 8, 8, 12, 12, 10, 10, 8, 8, 6, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            0, 0],
        [14, 12, 10, 8, 8, 10, 8, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            18, 16, 14, 14, 14, 12, 12, 10, 10, 8, 8, 12, 10, 10, 8, 8, 6, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            20, 18, 18, 16, 16, 14, 14, 14, 14, 12, 12, 10, 10, 8, 8, 12, 12, 10, 10, 8, 8, 6, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            22, 22, 20, 20, 18, 18, 16, 16, 16, 16, 14, 14, 12, 12, 10, 10, 14, 14, 12, 12, 10, 10, 8, 8, 8, 8, 6, 6, 4, 4, 2, 2,
            0, 0],                                         
        [30, 25, 21, 18, 18, 19, 15, 12, 12, 10, 7, 7, 3, 3, 0, 0, 
            37, 33, 30, 30, 28, 25, 25, 21, 21, 18, 18, 22, 19, 19, 15, 15, 12, 12, 10, 10, 7, 7, 3, 3, 0, 0, 
            40, 37, 37, 33, 33, 30, 30, 28, 28, 25, 25, 21, 21, 18, 18, 22, 22, 19, 19, 15, 15, 12, 12, 10, 10, 7, 7, 3, 3, 0, 0, 
            40, 40, 37, 37, 33, 33, 30, 30, 28, 28, 25, 25, 21, 21, 18, 18, 22, 22, 19, 19, 15, 15, 12, 12, 10, 10, 7, 7, 3, 3, 0, 0, 
            0, 0],
        [30, 25, 21, 18, 18, 19, 15, 12, 12, 10, 7, 7, 3, 3, 0, 0, 
            37, 33, 30, 30, 28, 25, 25, 21, 21, 18, 18, 22, 19, 19, 15, 15, 12, 12, 10, 10, 7, 7, 3, 3, 0, 0, 
            40, 37, 37, 33, 33, 30, 30, 28, 28, 25, 25, 21, 21, 18, 18, 22, 22, 19, 19, 15, 15, 12, 12, 10, 10, 7, 7, 3, 3, 0, 0, 
            42, 42, 39, 39, 35, 35, 32, 32, 30, 30, 27, 27, 23, 23, 20, 20, 24, 24, 21, 21, 17, 17, 14, 14, 12, 12, 9, 9, 5, 5, 2, 2, 
            0, 0],
        [22, 18, 15, 14, 13, 14, 11, 10, 9, 5, 5, 4, 2, 1, 0, 0, 
            28, 25, 24, 23, 21, 20, 19, 17, 16, 14, 13, 17, 16, 15, 13, 12, 10, 9, 8, 7, 6, 5, 2, 1, 0, 0, 
            31, 30, 29, 27, 26, 24, 23, 23, 22, 20, 19, 17, 16, 14, 13, 19, 18, 16, 15, 13, 12, 10, 9, 8, 7, 6, 5, 3, 2, 0, 0, 
            35, 34, 32, 31, 29, 28, 26, 25, 25, 24, 22, 21, 19, 18, 16, 15, 21, 20, 18, 17, 15, 14, 12, 11, 10, 9, 8, 5, 3, 2, 0, 0, 
            0, -2],
        [21, 18, 15, 14, 13, 14, 11, 10, 9, 5, 5, 4, 2, 1, 0, 0, 
            27, 24, 23, 22, 21, 20, 19, 17, 16, 14, 13, 17, 16, 15, 13, 12, 10, 9, 8, 7, 6, 5, 2, 1, 0, 0, 
            30, 29, 28, 26, 25, 23, 22, 23, 22, 20, 19, 17, 16, 14, 13, 19, 18, 16, 15, 13, 12, 10, 9, 8, 7, 6, 5, 3, 2, 0, 0, 
            34, 33, 31, 30, 28, 27, 25, 24, 25, 24, 22, 21, 19, 18, 16, 15, 21, 20, 18, 17, 15, 14, 12, 11, 10, 9, 8, 5, 3, 2, 0, 0, 
            0, 0],
        [ 12, 11, 10, 9, 8, 9, 7, 6, 6, 6, 4, 3, 2, 1, 0, 0, 
            17, 15, 14, 13, 14, 13, 12, 12, 10, 9, 8, 11, 10, 10, 9, 8, 7, 6, 6, 6, 5, 4, 2, 2, 0, 0, 
            19, 17, 17, 16, 15, 15, 14, 14, 14, 13, 12, 12, 11, 9, 8, 12, 12, 10, 10, 9, 8, 7, 6, 6, 6, 5, 4, 3, 2, 0, 0,
            19, 19, 17, 17, 16, 15, 15, 14, 14, 14, 13, 12, 12, 11, 9, 8, 12, 12, 10, 10, 9, 8, 7, 6, 6, 6, 5, 4, 3, 2, 0, 0,
            0, 0]
        ],
                                       
        'Vul_threshold': 0,
        'Nv_threshold': [50, 50, 100, 100, 75, 75, 50],
        'Expectation' : 0.0,
        'Accuracy': 0.0,
        'Score': 0.0 }, index=['Work',
            'Work++',
            'Woolsey',
            'Woolsey+',
            'Kleinman',
            'Kleinman+',
            'Optimized_Flat'])
        },
'semi-balanced' :  # includes 6332 and 5422
    { 'feature_names' : ['AK',
        'AQ',
        'AJ',
        'AT',
        'Ax',
        'KQ',
        'KJ',
        'KT',
        'Kx',
        'QJ',
        'QT',
        'Qx',
        'JT',
        'Jx',
        'Tx',
        'xx',
        'AKQ',
        'AKJ',
        'AKT',
        'AKx',
        'AQJ',
        'AQT',
        'AQx',
        'AJT',
        'AJx',
        'ATx',
        'Axx',
        'KQJ',
        'KQT',
        'KQx',
        'KJT',
        'KJx',
        'KTx',
        'Kxx',
        'QJT',
        'QJx',
        'QTx',
        'Qxx',
        'JTx',
        'Jxx',
        'Txx',
        'xxx',
        'AKQJ',
        'AKQT',
        'AKQx',
        'AKJT',
        'AKJx',
        'AKTx',
        'AKxx',
        'AQJT',
        'AQJx',
        'AQTx',
        'AQxx',
        'AJTx',
        'AJxx',
        'ATxx',
        'Axxx',
        'KQJT',
        'KQJx',
        'KQTx',
        'KQxx',
        'KJTx',
        'KJxx',
        'KTxx',
        'Kxxx',
        'QJTx',
        'QJxx',
        'QTxx',
        'Qxxx',
        'JTxx',
        'Jxxx',
        'Txxx',
        'xxxx',
        'AKQJT',
        'AKQJx',
        'AKQTx',
        'AKQxx',
        'AKJTx',
        'AKJxx',
        'AKTxx',
        'AKxxx',
        'AQJTx',
        'AQJxx',
        'AQTxx',
        'AQxxx',
        'AJTxx',
        'AJxxx',
        'ATxxx',
        'Axxxx',
        'KQJTx',
        'KQJxx',
        'KQTxx',
        'KQxxx',
        'KJTxx',
        'KJxxx',
        'KTxxx',
        'Kxxxx',
        'QJTxx',
        'QJxxx',
        'QTxxx',
        'Qxxxx',
        'JTxxx',
        'Jxxxx',
        'Txxxx',
        'xxxxx',
        'AKQJTx',
        'AKQJxx',
        'AKQTxx',
        'AKQxxx',
        'AKJTxx',
        'AKJxxx',
        'AKTxxx',
        'AKxxxx',
        'AQJTxx',
        'AQJxxx',
        'AQTxxx',
        'AQxxxx',
        'AJTxxx',
        'AJxxxx',
        'ATxxxx',
        'Axxxxx',
        'KQJTxx',
        'KQJxxx',
        'KQTxxx',
        'KQxxxx',
        'KJTxxx',
        'KJxxxx',
        'KTxxxx',
        'Kxxxxx',
        'QJTxxx',
        'QJxxxx',
        'QTxxxx',
        'Qxxxxx',
        'JTxxxx',
        'Jxxxxx',
        'Txxxxx',
        'xxxxxx',
        '5422',
        '4333'],
     'first_special_feature' : -2,  # first feature that cannot be determined by a string search
     'fixed_features' : [],         # features for which we do not wish to adjust the weights
     'features_ordered_by_high_cards': [range(4, -1, -1),
        range(8, 4, -1),
        range(11, 8, -1),
        range(15, 11, -1),
        range(19, 15, -1),
        range(22, 19, -1),
        range(26, 22, -1),
        range(29, 26, -1),
        range(33, 29, -1),
        range(37, 33, -1),
        range(41, 37, -1),
        range(48, 41, -1),
        range(52, 48, -1),
        range(56, 52, -1),
        range(60, 56, -1),
        range(64, 60, -1),
        range(68, 64, -1),
        range(72, 68, -1),
        range(76, 72, -1),
        range(80, 76, -1),
        range(84, 80, -1),
        range(88, 84, -1),
        range(92, 88, -1),
        range(96, 92, -1),
        range(100, 96, -1),
        range(104, 100, -1),
        range(108, 104, -1),
        range(112, 108, -1),
        range(116, 112, -1),
        range(120, 116, -1),
        range(124, 120, -1),
        range(128, 124, -1),
        range(132, 128, -1),
        range(136, 132, -1),
        range(137, 136, -1),
        range(138, 137, -1)],
    'features_ordered_by_length' : [[0, 19, 48, 80, 112],
        [1, 22, 52, 84, 116],
        [2, 24, 54, 86, 118],
        [3, 25, 55, 87, 119],
        [4, 26, 56, 88, 120],
        [5, 29, 60, 92, 124],
        [6, 31, 62, 94, 126],
        [7, 32, 63, 95, 127],
        [8, 33, 64, 96, 128],
        [9, 35, 66, 98, 130],
        [10, 36, 67, 99, 131],
        [11, 37, 68, 100, 132],
        [12, 38, 69, 101, 133],
        [13, 39, 70, 102, 134],
        [14, 40, 71, 103, 135],
        [15, 41, 72, 104, 136],
        [16, 44, 76, 108],
        [17, 46, 78, 110],
        [18, 47, 79, 111],
        [20, 50, 82, 114],
        [21, 51, 83, 115],
        [23, 53, 85, 117],
        [27, 58, 90, 122],
        [28, 59, 91, 123],
        [30, 61, 93, 125],
        [34, 65, 97, 129],
        [42, 74, 106],
        [43, 75, 107],
        [45, 77, 109],
        [49, 81, 113],
        [57, 89, 121],
        [73, 105],
        [137],
        [138]],
    'default_vectors' : pd.DataFrame({ 'Vector': [[14, 12, 10, 8, 8, 10, 8, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            18, 16, 14, 14, 14, 12, 12, 10, 10, 8, 8, 12, 10, 10, 8, 8, 6, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            20, 18, 18, 16, 16, 14, 14, 14, 14, 12, 12, 10, 10, 8, 8, 12, 12, 10, 10, 8, 8, 6, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            20, 20, 18, 18, 16, 16, 14, 14, 14, 14, 12, 12, 10, 10, 8, 8, 12, 12, 10, 10, 8, 8, 6, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            20, 20, 18, 18, 16, 16, 14, 14, 14, 14, 12, 12, 10, 10, 8, 8, 12, 12, 10, 10, 8, 8, 6, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            0, 0],
        [14, 12, 10, 8, 8, 10, 8, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            18, 16, 14, 14, 14, 12, 12, 10, 10, 8, 8, 12, 10, 10, 8, 8, 6, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            20, 18, 18, 16, 16, 14, 14, 14, 14, 12, 12, 10, 10, 8, 8, 12, 12, 10, 10, 8, 8, 6, 6, 6, 6, 4, 4, 2, 2, 0, 0,
            22, 22, 20, 20, 18, 18, 16, 16, 16, 16, 14, 14, 12, 12, 10, 10, 14, 14, 12, 12, 10, 10, 8, 8, 8, 8, 6, 6, 4, 4, 2, 2,
            24, 24, 22, 22, 20, 20, 18, 18, 18, 18, 16, 16, 14, 14, 12, 12, 16, 16, 14, 14, 12, 12, 10, 10, 10, 10, 8, 8, 6, 6, 4, 4,
            0, 0],                                         
        [30, 25, 21, 18, 18, 19, 15, 12, 12, 10, 7, 7, 3, 3, 0, 0, 
            37, 33, 30, 30, 28, 25, 25, 21, 21, 18, 18, 22, 19, 19, 15, 15, 12, 12, 10, 10, 7, 7, 3, 3, 0, 0, 
            40, 37, 37, 33, 33, 30, 30, 28, 28, 25, 25, 21, 21, 18, 18, 22, 22, 19, 19, 15, 15, 12, 12, 10, 10, 7, 7, 3, 3, 0, 0, 
            40, 40, 37, 37, 33, 33, 30, 30, 28, 28, 25, 25, 21, 21, 18, 18, 22, 22, 19, 19, 15, 15, 12, 12, 10, 10, 7, 7, 3, 3, 0, 0, 
            40, 40, 37, 37, 33, 33, 30, 30, 28, 28, 25, 25, 21, 21, 18, 18, 22, 22, 19, 19, 15, 15, 12, 12, 10, 10, 7, 7, 3, 3, 0, 0, 
            0, 0],
        [30, 25, 21, 18, 18, 19, 15, 12, 12, 10, 7, 7, 3, 3, 0, 0, 
            37, 33, 30, 30, 28, 25, 25, 21, 21, 18, 18, 22, 19, 19, 15, 15, 12, 12, 10, 10, 7, 7, 3, 3, 0, 0, 
            40, 37, 37, 33, 33, 30, 30, 28, 28, 25, 25, 21, 21, 18, 18, 22, 22, 19, 19, 15, 15, 12, 12, 10, 10, 7, 7, 3, 3, 0, 0, 
            42, 42, 39, 39, 35, 35, 32, 32, 30, 30, 27, 27, 23, 23, 20, 20, 24, 24, 21, 21, 17, 17, 14, 14, 12, 12, 9, 9, 5, 5, 2, 2, 
            44, 44, 41, 41, 37, 37, 34, 34, 32, 32, 29, 29, 25, 25, 22, 22, 26, 26, 23, 23, 19, 19, 16, 16, 14, 14, 11, 11, 7, 7, 4, 4, 
            0, 0],
        [22, 18, 15, 14, 13, 14, 11, 10, 9, 5, 5, 4, 2, 1, 0, 0, 
            28, 25, 24, 23, 21, 20, 19, 17, 16, 14, 13, 17, 16, 15, 13, 12, 10, 9, 8, 7, 6, 5, 2, 1, 0, 0, 
            31, 30, 29, 27, 26, 24, 23, 23, 22, 20, 19, 17, 16, 14, 13, 19, 18, 16, 15, 13, 12, 10, 9, 8, 7, 6, 5, 3, 2, 0, 0, 
            35, 34, 32, 31, 29, 28, 26, 25, 25, 24, 22, 21, 19, 18, 16, 15, 21, 20, 18, 17, 15, 14, 12, 11, 10, 9, 8, 5, 3, 2, 0, 0, 
            37, 36, 34, 33, 31, 30, 28, 27, 27, 26, 24, 23, 21, 20, 18, 17, 23, 22, 20, 19, 17, 16, 14, 13, 12, 11, 10, 5, 3, 2, 0, 0, 
            0, -2],
        [21, 18, 15, 14, 13, 14, 11, 10, 9, 5, 5, 4, 2, 1, 0, 0, 
            27, 24, 23, 22, 21, 20, 19, 17, 16, 14, 13, 17, 16, 15, 13, 12, 10, 9, 8, 7, 6, 5, 2, 1, 0, 0, 
            30, 29, 28, 26, 25, 23, 22, 23, 22, 20, 19, 17, 16, 14, 13, 19, 18, 16, 15, 13, 12, 10, 9, 8, 7, 6, 5, 3, 2, 0, 0, 
            34, 33, 31, 30, 28, 27, 25, 24, 25, 24, 22, 21, 19, 18, 16, 15, 21, 20, 18, 17, 15, 14, 12, 11, 10, 9, 8, 5, 3, 2, 0, 0, 
            36, 35, 33, 32, 30, 29, 27, 26, 27, 26, 24, 23, 21, 20, 18, 17, 23, 22, 20, 19, 17, 16, 14, 13, 12, 11, 10, 5, 3, 2, 0, 0, 
            0, 0]
        ],        
        'Vul_threshold': 0,
        'Nv_threshold': [50, 50, 100, 100, 75, 75],
        'Expectation' : 0.0,
        'Accuracy': 0.0,
        'Score': 0.0 }, index=['Work',
            'Work++',
            'Woolsey',
            'Woolsey+',
            'Kleinman',
            'Kleinman+'])
        }
    
    }
